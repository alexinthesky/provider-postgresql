/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PublicationParameters struct {

	// Should be ALL TABLES added to the publication. Defaults to 'false'
	// Sets the tables list to publish to ALL tables
	// +kubebuilder:validation:Optional
	AllTables *bool `json:"allTables,omitempty" tf:"all_tables,omitempty"`

	// Which database to create the publication on. Defaults to provider database.
	// Sets the database to add the publication for
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Should all subsequent resources of the publication be dropped. Defaults to 'false'
	// When true, will also drop all the objects that depend on the publication, and in turn all objects that depend on those objects
	// +kubebuilder:validation:Optional
	DropCascade *bool `json:"dropCascade,omitempty" tf:"drop_cascade,omitempty"`

	// Who owns the publication. Defaults to provider user.
	// Sets the owner of the publication
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Which 'publish' options should be turned on. Default to 'insert','update','delete'
	// Sets which DML operations will be published
	// +kubebuilder:validation:Optional
	PublishParam []*string `json:"publishParam,omitempty" tf:"publish_param,omitempty"`

	// Should be option 'publish_via_partition_root' be turned on. Default to 'false'
	// Sets whether changes in a partitioned table using the identity and schema of the partitioned table
	// +kubebuilder:validation:Optional
	PublishViaPartitionRootParam *bool `json:"publishViaPartitionRootParam,omitempty" tf:"publish_via_partition_root_param,omitempty"`

	// Which tables add to the publication. By defaults no tables added. Format of table is <schema_name>.<table_name>. If <schema_name> is not specified - default database schema will be used.
	// Sets the tables list to publish
	// +kubebuilder:validation:Optional
	Tables []*string `json:"tables,omitempty" tf:"tables,omitempty"`
}

// PublicationSpec defines the desired state of Publication
type PublicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicationParameters `json:"forProvider"`
}

// PublicationStatus defines the observed state of Publication.
type PublicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Publication is the Schema for the Publications API. Creates and manages a publication in a PostgreSQL server database.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,postgresql}
type Publication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicationSpec   `json:"spec"`
	Status            PublicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicationList contains a list of Publications
type PublicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Publication `json:"items"`
}

// Repository type metadata.
var (
	Publication_Kind             = "Publication"
	Publication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Publication_Kind}.String()
	Publication_KindAPIVersion   = Publication_Kind + "." + CRDGroupVersion.String()
	Publication_GroupVersionKind = CRDGroupVersion.WithKind(Publication_Kind)
)

func init() {
	SchemeBuilder.Register(&Publication{}, &PublicationList{})
}
