/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoleParameters struct {

	// Defines the role to switch to at login via SET ROLE.
	// Role to switch to at login
	// +kubebuilder:validation:Optional
	AssumeRole *string `json:"assumeRole,omitempty" tf:"assume_role,omitempty"`

	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is false.
	// Determine whether a role bypasses every row-level security (RLS) policy
	// +kubebuilder:validation:Optional
	BypassRowLevelSecurity *bool `json:"bypassRowLevelSecurity,omitempty" tf:"bypass_row_level_security,omitempty"`

	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. -1 (the default) means no
	// limit.
	// How many concurrent connections can be made with this role
	// +kubebuilder:validation:Optional
	ConnectionLimit *float64 `json:"connectionLimit,omitempty" tf:"connection_limit,omitempty"`

	// Defines a role's ability to execute CREATE DATABASE.  Default value is false.
	// Define a role's ability to create databases
	// +kubebuilder:validation:Optional
	CreateDatabase *bool `json:"createDatabase,omitempty" tf:"create_database,omitempty"`

	// Defines a role's ability to execute CREATE ROLE.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is false.
	// Determine whether this role will be permitted to create new roles
	// +kubebuilder:validation:Optional
	CreateRole *bool `json:"createRole,omitempty" tf:"create_role,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *string `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is true.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// PostgreSQL's .
	// Control whether the password is stored encrypted in the system catalogs
	// +kubebuilder:validation:Optional
	EncryptedPassword *bool `json:"encryptedPassword,omitempty" tf:"encrypted_password,omitempty"`

	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	// +kubebuilder:validation:Optional
	IdleInTransactionSessionTimeout *float64 `json:"idleInTransactionSessionTimeout,omitempty" tf:"idle_in_transaction_session_timeout,omitempty"`

	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is true.
	// Determine whether a role "inherits" the privileges of roles it is a member of
	// +kubebuilder:validation:Optional
	Inherit *bool `json:"inherit,omitempty" tf:"inherit,omitempty"`

	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is false.
	// Determine whether a role is allowed to log in
	// +kubebuilder:validation:Optional
	Login *bool `json:"login,omitempty" tf:"login,omitempty"`

	// Sets the role's password. A password is only of use
	// for roles having the login attribute set to true.
	// Sets the role's password
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is false
	// Determine whether a role is allowed to initiate streaming replication or put the system in and out of backup mode
	// +kubebuilder:validation:Optional
	Replication *bool `json:"replication,omitempty" tf:"replication,omitempty"`

	// Defines list of roles which will be granted to this new role.
	// Role(s) to grant to this new role
	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// ", ".
	// Sets the role's search path
	// +kubebuilder:validation:Optional
	SearchPath []*string `json:"searchPath,omitempty" tf:"search_path,omitempty"`

	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// cleanup of ownership of objects
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	// Skip actually running the DROP ROLE command when removing a ROLE from PostgreSQL
	// +kubebuilder:validation:Optional
	SkipDropRole *bool `json:"skipDropRole,omitempty" tf:"skip_drop_role,omitempty"`

	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// REASSIGN OWNED in
	// must be executed on each of the respective databases before the DROP ROLE
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// DROP OWNED).
	// Skip actually running the REASSIGN OWNED command when removing a role from PostgreSQL
	// +kubebuilder:validation:Optional
	SkipReassignOwned *bool `json:"skipReassignOwned,omitempty" tf:"skip_reassign_owned,omitempty"`

	// Defines statement_timeout setting for this role which allows to abort any statement that takes more than the specified amount of time.
	// Abort any statement that takes more than the specified number of milliseconds
	// +kubebuilder:validation:Optional
	StatementTimeout *float64 `json:"statementTimeout,omitempty" tf:"statement_timeout,omitempty"`

	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is false.
	// Determine whether the new role is a "superuser"
	// +kubebuilder:validation:Optional
	Superuser *bool `json:"superuser,omitempty" tf:"superuser,omitempty"`

	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this valid_time
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value NULL is used, valid_until will be
	// set to infinity.  Default is NULL, therefore infinity.
	// Sets a date and time after which the role's password is no longer valid
	// +kubebuilder:validation:Optional
	ValidUntil *string `json:"validUntil,omitempty" tf:"valid_until,omitempty"`
}

// RoleSpec defines the desired state of Role
type RoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleParameters `json:"forProvider"`
}

// RoleStatus defines the observed state of Role.
type RoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Role is the Schema for the Roles API. Creates and manages a role on a PostgreSQL server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,postgresql}
type Role struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleSpec   `json:"spec"`
	Status            RoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleList contains a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Role `json:"items"`
}

// Repository type metadata.
var (
	Role_Kind             = "Role"
	Role_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Role_Kind}.String()
	Role_KindAPIVersion   = Role_Kind + "." + CRDGroupVersion.String()
	Role_GroupVersionKind = CRDGroupVersion.WithKind(Role_Kind)
)

func init() {
	SchemeBuilder.Register(&Role{}, &RoleList{})
}
