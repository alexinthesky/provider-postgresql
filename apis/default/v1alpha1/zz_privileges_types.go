/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivilegesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PrivilegesParameters struct {

	// The database to grant default privileges for this role.
	// The database to grant default privileges for this role
	// +kubebuilder:validation:Required
	Database *string `json:"database" tf:"database,omitempty"`

	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).
	// The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema)
	// +kubebuilder:validation:Required
	ObjectType *string `json:"objectType" tf:"object_type,omitempty"`

	// Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).
	// Target role for which to alter default privileges.
	// +kubebuilder:validation:Required
	Owner *string `json:"owner" tf:"owner,omitempty"`

	// The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.
	// The list of privileges to apply as default privileges
	// +kubebuilder:validation:Required
	Privileges []*string `json:"privileges" tf:"privileges,omitempty"`

	// The name of the role to which grant default privileges on.
	// The name of the role to which grant default privileges on
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// The database schema to set default privileges for this role.
	// The database schema to set default privileges for this role
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Permit the grant recipient to grant it to others
	// +kubebuilder:validation:Optional
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

// PrivilegesSpec defines the desired state of Privileges
type PrivilegesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivilegesParameters `json:"forProvider"`
}

// PrivilegesStatus defines the observed state of Privileges.
type PrivilegesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivilegesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Privileges is the Schema for the Privilegess API. Creates and manages default privileges given to a user for a database schema.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,postgresql}
type Privileges struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivilegesSpec   `json:"spec"`
	Status            PrivilegesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivilegesList contains a list of Privilegess
type PrivilegesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Privileges `json:"items"`
}

// Repository type metadata.
var (
	Privileges_Kind             = "Privileges"
	Privileges_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Privileges_Kind}.String()
	Privileges_KindAPIVersion   = Privileges_Kind + "." + CRDGroupVersion.String()
	Privileges_GroupVersionKind = CRDGroupVersion.WithKind(Privileges_Kind)
)

func init() {
	SchemeBuilder.Register(&Privileges{}, &PrivilegesList{})
}
